name: CI Pipeline  
  
on:  
  push:  
    branches:  
      - main  

  
jobs:  
  build-and-deploy:  
    runs-on: ubuntu-latest  
    env:   
      IMAGE_NAME: "testCICD"  
      DOCKER_REPO: "testCICD"   
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
  
    steps:  
      - name: Checkout Repository  
        uses: actions/checkout@v3  
  
      # 安装Node.js和npm  
      - name: Set up Node.js  
        uses: actions/setup-node@v3  
        with:  
          node-version: '22'  
  
      # 缓存node_modules以加速构建  
      - name: Cache node_modules  
        uses: actions/cache@v3  
        with:  
          path: '**/node_modules'  
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  
          restore-keys: |  
            ${{ runner.os }}-node-  
  
      # 安装项目依赖  
      - name: Install Dependencies  
        run: npm install  

      # 运行测试（假设有test脚本）  
      #- name: Run Tests  
      #  run: npm test  
  
      # 构建Docker镜像  
      - name: Build Docker Image  
        run: |  
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  
          docker build -t ${IMAGE_NAME}:${TIMESTAMP} .  
        env:  
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      # 登录到私有 Docker 仓库  
      - name: Login to private Docker registry  
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY_URL }}  
  
      # 推送Docker镜像到Docker Hub（注意这里也使用了 TIMESTAMP 变量）  
      - name: Push Docker Image to Docker Hub  
        run: |  
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  
          docker tag ${IMAGE_NAME}:${TIMESTAMP} ${DOCKER_REPO}:${TIMESTAMP} && docker push ${DOCKER_REPO}:${TIMESTAMP}  
        env:  
          IMAGE_NAME: ${{ env.IMAGE_NAME }}  
          DOCKER_REPO: ${{ env.DOCKER_REPO }}  
  
      # 可选：推送带有latest标签的镜像（同样使用了 TIMESTAMP 变量）  
      - name: Push Docker Image with latest tag (optional)  
        run: |  
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  
          docker tag ${IMAGE_NAME}:${TIMESTAMP} ${DOCKER_REPO}:latest && docker push ${DOCKER_REPO}:latest  
        env:  
          IMAGE_NAME: ${{ env.IMAGE_NAME }}  
          DOCKER_REPO: ${{ env.DOCKER_REPO }}  
  
      # 通知（可选，例如使用Slack等通知工具）  
      - name: Notify Server with Latest Docker Image Name  
        run: |  
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  
          image_name="${IMAGE_NAME}:${TIMESTAMP}"  
          json_payload='{  
            "image_name": "'$image_name'"  
          }'  
          curl -X POST -H "Content-Type: application/json" --data "$json_payload" ${{ secrets.WEBHOOK_URL }}  
        env:  
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
